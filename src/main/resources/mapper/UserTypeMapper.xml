<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nuist.power.mapper.UserTypeMapper" >
    <select id="getAllUserType" resultType="com.nuist.power.bean.UserType">
        select
            d.id, d.avg_money,d.user_every_count ,
            case when d.avg_money > #{avgMoney} and d.user_every_count > #{userEveryCount} then '高价值型客户'
                 when #{avgMoney} > d.avg_money  and d.user_every_count > #{userEveryCount} then '大众型客户'
                 when d.avg_money > #{avgMoney} and  #{userEveryCount} > d.user_every_count then '潜力型客户'
                 when #{avgMoney} > d.avg_money  and #{userEveryCount} > d.user_every_count then '低价值型客户'
            end 'status'
        from
            (
                select
                    c.uid id,c.avg_money avg_money,c.user_every_count user_every_count
                from(
                        select
                            a.user_id uid,round(a.pay_money_sum/b.user_count,2) avg_money,b.user_count user_every_count
                        from(
                                (select user_id,sum(pay_money) pay_money_sum
                                 from user_pay_info
                                 group by user_id) a
                                    left join
                                    (select user_id, count(user_id) user_count
                                     from user_pay_info
                                     group by user_id) b
                                on a.user_id = b.user_id
                                )
                    )c
            )d
    </select>

    <!--按照用户的类别进行分类-->
    <select id="getUserStatusGroupCount" resultType="java.util.LinkedHashMap">
        select status,count(*) as nums
        from user_type
        group by status
    </select>
    
    <!--获取用户的类别-->
    <select id="getUserType" resultType="java.lang.String">
        select status
        from user_type
        where id = #{userId}
    </select>

    <!--根据平均缴费金额获取用户的排名-->
    <select id="getUserRankByAvgPayMoney" resultType="int">
        select
            a.user_rank
        from
            (select id,DENSE_RANK() over(order by avg_money desc) user_rank
             from user_type) a
        where a.id = #{userId};
    </select>

    <!--根据缴费总金额获取用户的排名-->
    <select id="getUserRankByTotalPayMoney" resultType="int">
        select a.user_rank
        from
            (select id,DENSE_RANK() over(order by avg_money*user_every_count desc)  user_rank
             from user_type) a
        where id = #{userId}
    </select>
</mapper>
